---
description: 
globs: 
alwaysApply: false
---
---
description: Main index of best practices for Satūs
globs: **/*
alwaysApply: false
---
---
description: Global rules
globs: *.tsx, *.jsx, *.css, *.js, *.ts
---

1. **Type Safety**
   - Use TypeScript for all new code
   - Maintain strict type checking
   - Avoid `any` types unless absolutely necessary
   - Use proper type imports (`import type` when importing only types)

2. **Performance**
   - Use React Server Components by default
   - Enable Turbopack for development (`bun dev` uses `--turbopack`)
   - Implement proper code splitting with `next/dynamic`
   - Follow recommended caching strategies
   - Optimize assets and bundles

3. **Code Quality**
   - Follow Biome linting rules
   - Maintain consistent code style
   - Write meaningful comments and documentation
   - Use meaningful variable and function names
   - Prefer named exports for components

4. **Testing & Debugging**
   - Write unit tests for critical functionality
   - Implement proper error boundaries
   - Follow error handling best practices

5. **Security**
   - Follow security best practices
   - Properly handle environment variables
   - Implement proper authentication
   - Follow CSP guidelines
   - Use server-side validation for forms

6. **Architecture**
   - Follow the defined project structure
   - Maintain separation of concerns
   - Use proper state management (Zustand when needed)
   - Follow component composition patterns
   - Keep client/server boundaries clear

## Technology Stack

- **Next.js 15.3.2** - App Router with Turbopack support
- **React 19.1.0** - Latest features including simplified ref handling
- **React Compiler enabled** - Automatically optimizes most component re-renders and memoization; manual memoization is rarely needed
- **TypeScript** - Strict mode enabled
- **Tailwind CSS 4.1.7** - CSS-first configuration
- **Biome 1.9.4** - Linting and formatting
- **Bun** - JavaScript runtime and package manager

## File Organization

```
├── app/                  # Next.js pages and routes
├── collections/          # PayloadCMS Content collections
├── components/           # Reusable UI components
├── data/                 # Data fetching from PayloadCMS
├── shaders/              # GLSL Shaders
```

## Development Guidelines

1. **Component Development**
   - Use tailwind for component styling
   - Use `cn` from `clsx` for conditional classes

2. **State Management**
   - Prefer React's built-in state for component state
   - Use Zustand for global state when needed
   - Keep state as close to where it's used as possible

3. **Routing & Navigation**
   - Use Next.js App Router conventions
   - Implement proper loading and error states
   - Use `next/link` for internal navigation

4. **Styling**
   - Follow Tailwind CSS v4 conventions
   - Use CSS variables for theming
   - Implement responsive design with breakpoints

## Getting Started

1. Review relevant best practices before starting work in a specific area
2. Follow the project structure guidelines
3. Use the provided development tools and debugging features
4. Consult the documentation for specific implementation details

## Updates

These best practices are regularly updated to reflect:
- New dependencies and versions
- Improved patterns and practices
- Community feedback and learnings
- Project-specific requirements

Last updated: 2025-06-02